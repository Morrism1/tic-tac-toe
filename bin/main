#!/usr/bin/env ruby
require_relative "../lib/validation.rb"
require_relative "../lib/board.rb"
require_relative "../lib/user.rb"

require "pry"

puts "Welcome to the Tic-Tac-Toe game"

puts "\nPlayer one enter your name:"

player_one = User.get_user_name("one")
puts ""
player_one_symbol = User.get_user_symbol(player_one, nil)
puts ""
puts "Player two enter your name:"

player_two = User.get_user_name("two")
puts ""
player_two_symbol = User.get_user_symbol(player_two, player_one_symbol)
puts ""


start_over = true
while start_over == true
    playing = true
    new_board = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    turn_counter = 0

    puts ""
    Board.display_board(new_board)

    while playing == true

        turn_over = false
        turn_counter += 1
        while turn_over == false
            puts "\n#{player_one} make a valid move:"
            player_one_move = Board.player_move(player_one)
            if Logic.valid_move?(player_one_move, new_board)
                new_board[player_one_move] = player_one_symbol
                turn_over = true
            else
                turn_over = false
            end
        end

        puts ""
        Board.display_board(new_board)
        
        if turn_counter == 9
            playing = false
            break
        end

        if Logic.game_defined?(new_board)
            playing = false
            break
        end




        turn_over = false
        turn_counter += 1
        while turn_over == false
            puts "\n#{player_two} make a valid move:"
            player_two_move = Board.player_move(player_two)
            if Logic.valid_move?(player_two_move, new_board)
                new_board[player_two_move] = player_two_symbol
                turn_over = true
            else
                turn_over = false
            end
        end

        puts ""
        Board.display_board(new_board)

        
        if Logic.game_defined?(new_board)
            playing = false
            break
        end

    end

    puts ""

    if turn_counter == 9
        puts "It's a draw!"
    elsif turn_counter.odd?
        puts "Congratulations #{player_one} you won!"
    elsif turn_counter.even?
        puts "Congratulations #{player_two} you won!"
    end


    start_again = ""
    while start_again != "yes" || start_again != "no"
        puts "\nDo you want to play again? (yes/no)"
        start_again = gets.chomp
        if start_again == "yes"
            break
        elsif start_again == "no"
            puts "\nThanks for playing, see you!"
            start_over = false
            return start_over
        end
    end
end